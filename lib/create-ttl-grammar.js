'use strict';

/*global atom*/
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const CompositeDisposable = require('atom').CompositeDisposable;

// This Class is repsonsible for creating a new Tagged Template grammar
// on detection of a changed Tagged Template Configuration in the package settings
module.exports = class CreateTtlGrammar {

  constructor() {
    let observeConfig = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
    this.disposable = new CompositeDisposable();
    this.configChangedTimer = null;
    this.TTL_GRAMMAR_NAME = 'language-babel-extension';
    this.TTL_SCOPENAME = `languagebabel.ttlextension`;

    if (observeConfig) {
      // look for changes in tagged template handlers
      this.disposable.add(atom.config.observe('language-babel.taggedTemplateGrammar', this.observeTtlConfig.bind(this, 10000)));
    }
  }

  destroy() {
    this.disposable.dispose();
  }

  // add new grammars to registry
  addGrammars(filename) {
    return new Promise((resolve, reject) => {
      atom.grammars.loadGrammar(filename, err => {
        if (err) {
          reject(new Error(`Unable to add Grammar to registry\n${ filename }`));
        } else resolve();
      });
    });
  }

  // Check if the grammar exists under this SHA256 file name
  // If not then remove all ttl grammars and create a new one
  // This returns a Promise that resolves  with a ttl filename
  // if a new grammar was created or rejects if a problem.
  createGrammar(_ref) {
    let ttlFilename = _ref.ttlFilename;
    let ttlFilenameAbsolute = _ref.ttlFilenameAbsolute;
    let grammarText = _ref.grammarText;

    return new Promise((resolve, reject) => {
      this.doesGrammarFileExist(ttlFilename).then(ifFileExists => {
        if (ifFileExists) {
          resolve();
        } else {
          this.removeGrammars();
          this.removeTtlLanguageFiles().then(() => this.createGrammarFile(ttlFilenameAbsolute, grammarText)).then(() => this.addGrammars(ttlFilenameAbsolute)).then(() => {
            atom.notifications.addInfo('language-babel', { detail: `Grammar created at \n${ ttlFilenameAbsolute }`, dismissable: true });
            resolve(ttlFilename);
          }).catch(err => {
            atom.notifications.addWarning('language-babel', { detail: `${ err.message }`, dismissable: true });
            reject(err);
          });
        }
      });
    });
  }

  // write the ttl grammar file for this config
  createGrammarFile(filename, text) {
    return new Promise((resolve, reject) => {
      fs.writeFile(filename, text, err => {
        if (err) reject(new Error(err));else resolve();
      });
    });
  }

  // create a Grammar file's JSON text
  createGrammarText() {
    return `{
  "name": "${ this.TTL_GRAMMAR_NAME }",
  "comment": "Auto generated Tag Extensions for language-babel",
  "comment": "Please do not edit this file directly",
  "scopeName": "${ this.TTL_SCOPENAME }",
  "fileTypes": [],
  "patterns": [
    ${ this.getTtlConfig().map(ttlString => this.createGrammarPatterns(ttlString)) }
  ]
}`;
  }

  // Create a grammar's pattern derived from a the tagged template string
  // in the form matchString:includeScope
  createGrammarPatterns(ttlString) {
    let lastColonIndex = ttlString.lastIndexOf(':');
    let matchString = ttlString.substring(0, lastColonIndex);
    let includeScope = ttlString.substring(lastColonIndex + 1);
    const isValidIncludeScope = /^([a-zA-Z]\w*\.?)*(\w#([a-zA-Z]\w*\.?)*)?\w$/.test(includeScope);
    const isQuotedMatchString = /^\".*\"$/.test(matchString);

    if (matchString.length < 1 || !isValidIncludeScope) {
      throw new Error(`Error in the Tagged Template Grammar String ${ ttlString }`);
    }

    if (isQuotedMatchString) {
      // Found a possible regexp in the form "regex" so strip the "
      // This is a oniguruma regex but we will do a simple JS regex test for
      // validity as it is most likely close enough!
      matchString = matchString.substring(1, matchString.length - 1);
      try {
        // We need to call oniguruma's constructor via this convoluted method as I can't include
        // the github/atom/node-oniguruma package as npm on Windows get node-gyp errors unless a
        // user has installed a compiler. Find Atom's Oniguruma and call the constructor.
        if (typeof atom.grammars.grammars === "object") {
          atom.grammars.grammars.every(obj => {
            if (obj.packageName === "language-babel") {
              let ref, ref1, ref2;
              if ((ref = obj.firstLineRegex) != null) {
                if ((ref1 = ref.scanner) != null) {
                  if ((ref2 = ref1.__proto__) != null) {
                    if (typeof ref2.constructor === "function") {
                      // Change JSON/JS type string to a valid regex
                      let onigString = matchString.replace(/\\\\/g, "\\"); // double slashes to single
                      onigString = onigString.replace(/\\"/g, "\""); // escaped quote to quote
                      //now call new obj.firstLineRegex.scanner.__proto__.constructor([onigString]);
                      new ref2.constructor([onigString]);
                    }
                  }
                }
              }
              return false;
            } else return true;
          });
        }
      } catch (err) {
        throw new Error(`You entered an badly formed RegExp in the Tagged Template Grammar settings.\n${ matchString }\n${ err }`);
      }
    } else if (/"/g.test(matchString)) {
      throw new Error(`Bad literal string in the Tagged Template Grammar settings.\n${ matchString }`);
    } else {
      // User entered a literal string which may contain chars that a special inside a regex.
      // Escape any special chars e.g. '/** @html */' -> '\/\*\* @html \*\/'
      // The string stored by Atom in the config has the \\ already escaped.
      const escapeStringRegExp = /[|{}()[\]^$+*?.]/g;
      const preEscapedSlash = /\\/g;
      matchString = matchString.replace(preEscapedSlash, '\\\\\\\\');
      matchString = matchString.replace(escapeStringRegExp, '\\\\$&');
    }

    return `{
      "contentName": "${ includeScope.match(/^[^#]*/)[0] }",
      "begin": "\\\\s*+(${ matchString })\\\\s*(\`)",
      "beginCaptures": {
        "1": { "name": "entity.name.tag.js" },
        "2": { "name": "punctuation.definition.quasi.begin.js" }
      },
      "end": "\\\\s*(?<!\\\\\\\\)(\`)",
      "endCaptures": {
        "1": { "name": "punctuation.definition.quasi.end.js" }
      },
      "patterns": [
        { "include": "source.js.jsx#literal-quasi-embedded" },
        { "include": "${ includeScope }" }
      ]
    }`;
  }

  // checks a ttl grammar filename exists
  // returns a Promise that resolves to true if ttlFileName exists
  doesGrammarFileExist(ttlFilename) {
    return new Promise(resolve => {
      fs.access(this.makeTtlGrammarFilenameAbsoulute(ttlFilename), fs.F_OK, err => {
        err ? resolve(false) : resolve(true);
      });
    });
  }

  // get full path to the language-babel grammar file dir
  getGrammarPath() {
    return path.normalize(path.resolve(atom.packages.loadedPackages['language-babel'].path, './grammars'));
  }

  // get an array of all language-babel grammar files
  getGrammarFiles() {
    return new Promise((resolve, reject) => {
      fs.readdir(this.getGrammarPath(), (err, data) => {
        if (err) reject(new Error(err));else {
          resolve(data);
        }
      });
    });
  }

  // read configurations for tagged templates
  getTtlConfig() {
    return atom.config.get('language-babel').taggedTemplateGrammar;
  }

  // get an array of grammar tagged template extension filenames
  getTtlGrammarFiles() {
    return this.getGrammarFiles().then(dirFiles => dirFiles.filter(function (filename) {
      return (/^ttl-/.test(filename)
      );
    }));
  }

  // generate a SHA256 for some text
  generateTtlSHA256(stringToHash) {
    let hash = crypto.createHash('sha256');
    hash.update(stringToHash);
    return hash.digest('hex');
  }

  // tagged template filename
  makeTtlGrammarFilename(hashString) {
    return `ttl-${ hashString }.json`;
  }

  // get a fully qualified filename
  makeTtlGrammarFilenameAbsoulute(ttlFilename) {
    return path.resolve(this.getGrammarPath(), ttlFilename);
  }

  // observe changes in the taggedTemplateGrammar config which take place
  // because observed config changes are fired as a user types them inside
  // settings we need to delay processing the array strings, until last char
  // entered was setTimeout seconds ago. parse tagged template configuration
  // and then create grammar and generate a SHA256 hash from the grammar
  observeTtlConfig(timeout) {
    if (this.configChangedTimer) clearTimeout(this.configChangedTimer);
    this.configChangedTimer = setTimeout(() => {
      try {
        const grammarText = this.createGrammarText();
        const hash = this.generateTtlSHA256(grammarText);
        const ttlFilename = this.makeTtlGrammarFilename(hash);
        const ttlFilenameAbsolute = this.makeTtlGrammarFilenameAbsoulute(ttlFilename);
        this.createGrammar({ ttlFilename, ttlFilenameAbsolute, grammarText });
      } catch (err) {
        atom.notifications.addWarning('language-babel', { detail: `${ err.message }`, dismissable: true });
      }
    }, timeout);
  }

  // Remove grammars before upodating
  removeGrammars() {
    atom.grammars.removeGrammarForScopeName(this.TTL_SCOPENAME);
  }

  // remove all language files in tagged template GrammarFiles array
  removeTtlLanguageFiles() {
    return this.getTtlGrammarFiles().then(ttlGrammarFiles => {
      for (let ttlGrammarFilename of ttlGrammarFiles) {
        let ttlGrammarFileAbsoulte = this.makeTtlGrammarFilenameAbsoulute(ttlGrammarFilename);
        fs.unlink(ttlGrammarFileAbsoulte);
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZS10dGwtZ3JhbW1hci5qcyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiZnMiLCJwYXRoIiwiQ29tcG9zaXRlRGlzcG9zYWJsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJDcmVhdGVUdGxHcmFtbWFyIiwiY29uc3RydWN0b3IiLCJvYnNlcnZlQ29uZmlnIiwiZGlzcG9zYWJsZSIsImNvbmZpZ0NoYW5nZWRUaW1lciIsIlRUTF9HUkFNTUFSX05BTUUiLCJUVExfU0NPUEVOQU1FIiwiYWRkIiwiYXRvbSIsImNvbmZpZyIsIm9ic2VydmUiLCJvYnNlcnZlVHRsQ29uZmlnIiwiYmluZCIsImRlc3Ryb3kiLCJkaXNwb3NlIiwiYWRkR3JhbW1hcnMiLCJmaWxlbmFtZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ3JhbW1hcnMiLCJsb2FkR3JhbW1hciIsImVyciIsIkVycm9yIiwiY3JlYXRlR3JhbW1hciIsInR0bEZpbGVuYW1lIiwidHRsRmlsZW5hbWVBYnNvbHV0ZSIsImdyYW1tYXJUZXh0IiwiZG9lc0dyYW1tYXJGaWxlRXhpc3QiLCJ0aGVuIiwiaWZGaWxlRXhpc3RzIiwicmVtb3ZlR3JhbW1hcnMiLCJyZW1vdmVUdGxMYW5ndWFnZUZpbGVzIiwiY3JlYXRlR3JhbW1hckZpbGUiLCJub3RpZmljYXRpb25zIiwiYWRkSW5mbyIsImRldGFpbCIsImRpc21pc3NhYmxlIiwiY2F0Y2giLCJhZGRXYXJuaW5nIiwibWVzc2FnZSIsInRleHQiLCJ3cml0ZUZpbGUiLCJjcmVhdGVHcmFtbWFyVGV4dCIsImdldFR0bENvbmZpZyIsIm1hcCIsInR0bFN0cmluZyIsImNyZWF0ZUdyYW1tYXJQYXR0ZXJucyIsImxhc3RDb2xvbkluZGV4IiwibGFzdEluZGV4T2YiLCJtYXRjaFN0cmluZyIsInN1YnN0cmluZyIsImluY2x1ZGVTY29wZSIsImlzVmFsaWRJbmNsdWRlU2NvcGUiLCJ0ZXN0IiwiaXNRdW90ZWRNYXRjaFN0cmluZyIsImxlbmd0aCIsImV2ZXJ5Iiwib2JqIiwicGFja2FnZU5hbWUiLCJyZWYiLCJyZWYxIiwicmVmMiIsImZpcnN0TGluZVJlZ2V4Iiwic2Nhbm5lciIsIl9fcHJvdG9fXyIsIm9uaWdTdHJpbmciLCJyZXBsYWNlIiwiZXNjYXBlU3RyaW5nUmVnRXhwIiwicHJlRXNjYXBlZFNsYXNoIiwibWF0Y2giLCJhY2Nlc3MiLCJtYWtlVHRsR3JhbW1hckZpbGVuYW1lQWJzb3VsdXRlIiwiRl9PSyIsImdldEdyYW1tYXJQYXRoIiwibm9ybWFsaXplIiwicGFja2FnZXMiLCJsb2FkZWRQYWNrYWdlcyIsImdldEdyYW1tYXJGaWxlcyIsInJlYWRkaXIiLCJkYXRhIiwiZ2V0IiwidGFnZ2VkVGVtcGxhdGVHcmFtbWFyIiwiZ2V0VHRsR3JhbW1hckZpbGVzIiwiZGlyRmlsZXMiLCJmaWx0ZXIiLCJnZW5lcmF0ZVR0bFNIQTI1NiIsInN0cmluZ1RvSGFzaCIsImhhc2giLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwibWFrZVR0bEdyYW1tYXJGaWxlbmFtZSIsImhhc2hTdHJpbmciLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInJlbW92ZUdyYW1tYXJGb3JTY29wZU5hbWUiLCJ0dGxHcmFtbWFyRmlsZXMiLCJ0dGxHcmFtbWFyRmlsZW5hbWUiLCJ0dGxHcmFtbWFyRmlsZUFic291bHRlIiwidW5saW5rIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsTUFBTUEsU0FBU0MsUUFBUSxRQUFSLENBQWY7QUFDQSxNQUFNQyxLQUFLRCxRQUFRLElBQVIsQ0FBWDtBQUNBLE1BQU1FLE9BQU9GLFFBQVEsTUFBUixDQUFiO0FBQ0EsTUFBTUcsc0JBQXNCSCxRQUFRLE1BQVIsRUFBZ0JHLG1CQUE1Qzs7QUFFQTtBQUNBO0FBQ0FDLE9BQU9DLE9BQVAsR0FDQSxNQUFNQyxnQkFBTixDQUF1Qjs7QUFPckJDLGdCQUFtQztBQUFBLFFBQXZCQyxhQUF1Qix5REFBUCxLQUFPO0FBQUEsU0FMbkNDLFVBS21DLEdBTHRCLElB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Q0Q7QUFDRixLQVh5QixFQVd2QnlELE9BWHVCLENBQTFCO0FBWUQ7O0FBRUQ7QUFDQS9ELG1CQUFpQjtBQUNmdkIsU0FBS1ksUUFBTCxDQUFjNkUseUJBQWQsQ0FBd0MsS0FBSzNGLGFBQTdDO0FBQ0Q7O0FBRUQ7QUFDQTBCLDJCQUF5QjtBQUN2QixXQUFPLEtBQUttRCxrQkFBTCxHQUEwQnRELElBQTFCLENBQWdDcUUsZUFBRCxJQUFxQjtBQUN6RCxXQUFLLElBQUlDLGtCQUFULElBQStCRCxlQUEvQixFQUFnRDtBQUM5QyxZQUFJRSx5QkFBeUIsS0FBSzVCLCtCQUFMLENBQXFDMkIsa0JBQXJDLENBQTdCO0FBQ0F4RyxXQUFHMEcsTUFBSCxDQUFVRCxzQkFBVjtBQUNEO0FBQ0YsS0FMTSxDQUFQO0FBT0Q7QUFsUW9CLENBRHZCIiwiZmlsZSI6ImNyZWF0ZS10dGwtZ3JhbW1hci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGF0b20qL1xyXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5jb25zdCBDb21wb3NpdGVEaXNwb3NhYmxlID0gcmVxdWlyZSgnYXRvbScpLkNvbXBvc2l0ZURpc3Bvc2FibGU7XHJcblxyXG4vLyBUaGlzIENsYXNzIGlzIHJlcHNvbnNpYmxlIGZvciBjcmVhdGluZyBhIG5ldyBUYWdnZWQgVGVtcGxhdGUgZ3JhbW1hclxyXG4vLyBvbiBkZXRlY3Rpb24gb2YgYSBjaGFuZ2VkIFRhZ2dlZCBUZW1wbGF0ZSBDb25maWd1cmF0aW9uIGluIHRoZSBwYWNrYWdlIHNldHRpbmdzXHJcbm1vZHVsZS5leHBvcnRzID1cclxuY2xhc3MgQ3JlYXRlVHRsR3JhbW1hciB7XHJcblxyXG4gIGRpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gIGNvbmZpZ0NoYW5nZWRUaW1lcj0gbnVsbDtcclxuICBUVExfR1JBTU1BUl9OQU1FID0gJ2xhbmd1YWdlLWJhYmVsLWV4dGVuc2lvbic7XHJcbiAgVFRMX1NDT1BFTkFNRSA9IGBsYW5ndWFnZWJhYmVsLnR0bGV4dGVuc2lvbmA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9ic2VydmVDb25maWcgPSBmYWxzZSkge1xyXG4gICAgaWYgKG9ic2VydmVDb25maWcpICAge1xyXG4gICAgICAvLyBsb29rIGZvciBjaGFuZ2VzIGluIHRhZ2dlZCB0ZW1wbGF0ZSBoYW5kbGVyc1xyXG4gICAgICB0aGlzLmRpc3Bvc2FibGUuYWRkKGF0b20uY29uZmlnLm9ic2VydmUoJ2xhbmd1YWdlLWJhYmVsLnRhZ2dlZFRlbXBsYXRlR3JhbW1hcicsIHRoaXMub2JzZXJ2ZVR0bENvbmZpZy5iaW5kKHRoaXMsIDEwMDAwKSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBhZGQgbmV3IGdyYW1tYXJzIHRvIHJlZ2lzdHJ5XHJcbiAgYWRkR3JhbW1hcnMoZmlsZW5hbWUpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGF0b20uZ3JhbW1hcnMubG9hZEdyYW1tYXIoZmlsZW5hbWUsIChlcnIpID0+IHtcclxuICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBVbmFibGUgdG8gYWRkIEdyYW1tYXIgdG8gcmVnaXN0cnlcXG4ke2ZpbGVuYW1lfWApKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSByZXNvbHZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGdyYW1tYXIgZXhpc3RzIHVuZGVyIHRoaXMgU0hBMjU2IGZpbGUgbmFtZVxyXG4gIC8vIElmIG5vdCB0aGVuIHJlbW92ZSBhbGwgdHRsIGdyYW1tYXJzIGFuZCBjcmVhdGUgYSBuZXcgb25lXHJcbiAgLy8gVGhpcyByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzICB3aXRoIGEgdHRsIGZpbGVuYW1lXHJcbiAgLy8gaWYgYSBuZXcgZ3JhbW1hciB3YXMgY3JlYXRlZCBvciByZWplY3RzIGlmIGEgcHJvYmxlbS5cclxuICBjcmVhdGVHcmFtbWFyKHt0dGxGaWxlbmFtZSwgdHRsRmlsZW5hbWVBYnNvbHV0ZSwgZ3JhbW1hclRleHR9KSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLmRvZXNHcmFtbWFyRmlsZUV4aXN0KHR0bEZpbGVuYW1lKVxyXG4gICAgICAgIC50aGVuKChpZkZpbGVFeGlzdHMpID0+IHtcclxuICAgICAgICAgIGlmIChpZkZpbGVFeGlzdHMpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlR3JhbW1hcnMoKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVUdGxMYW5ndWFnZUZpbGVzKClcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jcmVhdGVHcmFtbWFyRmlsZSh0dGxGaWxlbmFtZUFic29sdXRlLCBncmFtbWFyVGV4dCkpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuYWRkR3JhbW1hcnModHRsRmlsZW5hbWVBYnNvbHV0ZSkpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnbGFuZ3VhZ2UtYmFiZWwnLCB7ZGV0YWlsOiBgR3JhbW1hciBjcmVhdGVkIGF0IFxcbiR7dHRsRmlsZW5hbWVBYnNvbHV0ZX1gLGRpc21pc3NhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh0dGxGaWxlbmFtZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoJ2xhbmd1YWdlLWJhYmVsJywge2RldGFpbDogYCR7ZXJyLm1lc3NhZ2V9YCxkaXNtaXNzYWJsZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gd3JpdGUgdGhlIHR0bCBncmFtbWFyIGZpbGUgZm9yIHRoaXMgY29uZmlnXHJcbiAgY3JlYXRlR3JhbW1hckZpbGUoZmlsZW5hbWUsdGV4dCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgZnMud3JpdGVGaWxlKGZpbGVuYW1lLCB0ZXh0LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycikgcmVqZWN0KG5ldyBFcnJvcihlcnIpKTtcclxuICAgICAgICBlbHNlIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIGNyZWF0ZSBhIEdyYW1tYXIgZmlsZSdzIEpTT04gdGV4dFxyXG4gIGNyZWF0ZUdyYW1tYXJUZXh0KCkge1xyXG4gICAgcmV0dXJuIGB7XHJcbiAgXCJuYW1lXCI6IFwiJHt0aGlzLlRUTF9HUkFNTUFSX05BTUV9XCIsXHJcbiAgXCJjb21tZW50XCI6IFwiQXV0byBnZW5lcmF0ZWQgVGFnIEV4dGVuc2lvbnMgZm9yIGxhbmd1YWdlLWJhYmVsXCIsXHJcbiAgXCJjb21tZW50XCI6IFwiUGxlYXNlIGRvIG5vdCBlZGl0IHRoaXMgZmlsZSBkaXJlY3RseVwiLFxyXG4gIFwic2NvcGVOYW1lXCI6IFwiJHt0aGlzLlRUTF9TQ09QRU5BTUV9XCIsXHJcbiAgXCJmaWxlVHlwZXNcIjogW10sXHJcbiAgXCJwYXR0ZXJuc1wiOiBbXHJcbiAgICAke3RoaXMuZ2V0VHRsQ29uZmlnKCkubWFwKCh0dGxTdHJpbmcpID0+ICh0aGlzLmNyZWF0ZUdyYW1tYXJQYXR0ZXJucyh0dGxTdHJpbmcpKSl9XHJcbiAgXVxyXG59YDtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhIGdyYW1tYXIncyBwYXR0ZXJuIGRlcml2ZWQgZnJvbSBhIHRoZSB0YWdnZWQgdGVtcGxhdGUgc3RyaW5nXHJcbiAgLy8gaW4gdGhlIGZvcm0gbWF0Y2hTdHJpbmc6aW5jbHVkZVNjb3BlXHJcbiAgY3JlYXRlR3JhbW1hclBhdHRlcm5zKHR0bFN0cmluZykge1xyXG4gICAgbGV0IGxhc3RDb2xvbkluZGV4ID0gdHRsU3RyaW5nLmxhc3RJbmRleE9mKCc6Jyk7XHJcbiAgICBsZXQgbWF0Y2hTdHJpbmcgPSB0dGxTdHJpbmcuc3Vic3RyaW5nKDAsIGxhc3RDb2xvbkluZGV4KTtcclxuICAgIGxldCBpbmNsdWRlU2NvcGUgPSB0dGxTdHJpbmcuc3Vic3RyaW5nKGxhc3RDb2xvbkluZGV4KzEpO1xyXG4gICAgY29uc3QgaXNWYWxpZEluY2x1ZGVTY29wZSA9IC9eKFthLXpBLVpdXFx3KlxcLj8pKihcXHcjKFthLXpBLVpdXFx3KlxcLj8pKik/XFx3JC8udGVzdChpbmNsdWRlU2NvcGUpO1xyXG4gICAgY29uc3QgaXNRdW90ZWRNYXRjaFN0cmluZyA9IC9eXFxcIi4qXFxcIiQvLnRlc3QobWF0Y2hTdHJpbmcpO1xyXG5cclxuICAgIGlmIChtYXRjaFN0cmluZy5sZW5ndGggPCAxIHx8ICFpc1ZhbGlkSW5jbHVkZVNjb3BlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgaW4gdGhlIFRhZ2dlZCBUZW1wbGF0ZSBHcmFtbWFyIFN0cmluZyAke3R0bFN0cmluZ31gKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIGlzUXVvdGVkTWF0Y2hTdHJpbmcgKSB7XHJcbiAgICAgIC8vIEZvdW5kIGEgcG9zc2libGUgcmVnZXhwIGluIHRoZSBmb3JtIFwicmVnZXhcIiBzbyBzdHJpcCB0aGUgXCJcclxuICAgICAgLy8gVGhpcyBpcyBhIG9uaWd1cnVtYSByZWdleCBidXQgd2Ugd2lsbCBkbyBhIHNpbXBsZSBKUyByZWdleCB0ZXN0IGZvclxyXG4gICAgICAvLyB2YWxpZGl0eSBhcyBpdCBpcyBtb3N0IGxpa2VseSBjbG9zZSBlbm91Z2ghXHJcbiAgICAgIG1hdGNoU3RyaW5nID0gbWF0Y2hTdHJpbmcuc3Vic3RyaW5nKDEsIG1hdGNoU3RyaW5nLmxlbmd0aCAtMSk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgLy8gV2UgbmVlZCB0byBjYWxsIG9uaWd1cnVtYSdzIGNvbnN0cnVjdG9yIHZpYSB0aGlzIGNvbnZvbHV0ZWQgbWV0aG9kIGFzIEkgY2FuJ3QgaW5jbHVkZVxyXG4gICAgICAgIC8vIHRoZSBnaXRodWIvYXRvbS9ub2RlLW9uaWd1cnVtYSBwYWNrYWdlIGFzIG5wbSBvbiBXaW5kb3dzIGdldCBub2RlLWd5cCBlcnJvcnMgdW5sZXNzIGFcclxuICAgICAgICAvLyB1c2VyIGhhcyBpbnN0YWxsZWQgYSBjb21waWxlci4gRmluZCBBdG9tJ3MgT25pZ3VydW1hIGFuZCBjYWxsIHRoZSBjb25zdHJ1Y3Rvci5cclxuICAgICAgICBpZiAodHlwZW9mIGF0b20uZ3JhbW1hcnMuZ3JhbW1hcnMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgIGF0b20uZ3JhbW1hcnMuZ3JhbW1hcnMuZXZlcnkoKG9iaikgPT4ge1xyXG4gICAgICAgICAgICBpZiAob2JqLnBhY2thZ2VOYW1lID09PSBcImxhbmd1YWdlLWJhYmVsXCIpIHtcclxuICAgICAgICAgICAgICBsZXQgcmVmLCByZWYxLCByZWYyO1xyXG4gICAgICAgICAgICAgIGlmICgocmVmID0gb2JqLmZpcnN0TGluZVJlZ2V4KSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHJlZjEgPSByZWYuc2Nhbm5lcikgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoKHJlZjIgPSByZWYxLl9fcHJvdG9fXykgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmMi5jb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgSlNPTi9KUyB0eXBlIHN0cmluZyB0byBhIHZhbGlkIHJlZ2V4XHJcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgb25pZ1N0cmluZyA9IG1hdGNoU3RyaW5nLnJlcGxhY2UoL1xcXFxcXFxcL2csXCJcXFxcXCIpOyAvLyBkb3VibGUgc2xhc2hlcyB0byBzaW5nbGVcclxuICAgICAgICAgICAgICAgICAgICAgIG9uaWdTdHJpbmcgPSBvbmlnU3RyaW5nLnJlcGxhY2UoL1xcXFxcIi9nLFwiXFxcIlwiKTsgLy8gZXNjYXBlZCBxdW90ZSB0byBxdW90ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgLy9ub3cgY2FsbCBuZXcgb2JqLmZpcnN0TGluZVJlZ2V4LnNjYW5uZXIuX19wcm90b19fLmNvbnN0cnVjdG9yKFtvbmlnU3RyaW5nXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgcmVmMi5jb25zdHJ1Y3Rvcihbb25pZ1N0cmluZ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgZW50ZXJlZCBhbiBiYWRseSBmb3JtZWQgUmVnRXhwIGluIHRoZSBUYWdnZWQgVGVtcGxhdGUgR3JhbW1hciBzZXR0aW5ncy5cXG4ke21hdGNoU3RyaW5nfVxcbiR7ZXJyfWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggL1wiL2cudGVzdChtYXRjaFN0cmluZykpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgbGl0ZXJhbCBzdHJpbmcgaW4gdGhlIFRhZ2dlZCBUZW1wbGF0ZSBHcmFtbWFyIHNldHRpbmdzLlxcbiR7bWF0Y2hTdHJpbmd9YCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gVXNlciBlbnRlcmVkIGEgbGl0ZXJhbCBzdHJpbmcgd2hpY2ggbWF5IGNvbnRhaW4gY2hhcnMgdGhhdCBhIHNwZWNpYWwgaW5zaWRlIGEgcmVnZXguXHJcbiAgICAgIC8vIEVzY2FwZSBhbnkgc3BlY2lhbCBjaGFycyBlLmcuICcvKiogQGh0bWwgKi8nIC0+ICdcXC9cXCpcXCogQGh0bWwgXFwqXFwvJ1xyXG4gICAgICAvLyBUaGUgc3RyaW5nIHN0b3JlZCBieSBBdG9tIGluIHRoZSBjb25maWcgaGFzIHRoZSBcXFxcIGFscmVhZHkgZXNjYXBlZC5cclxuICAgICAgY29uc3QgZXNjYXBlU3RyaW5nUmVnRXhwID0gL1t8e30oKVtcXF1eJCsqPy5dL2c7XHJcbiAgICAgIGNvbnN0IHByZUVzY2FwZWRTbGFzaCA9IC9cXFxcL2c7XHJcbiAgICAgIG1hdGNoU3RyaW5nID0gbWF0Y2hTdHJpbmcucmVwbGFjZShwcmVFc2NhcGVkU2xhc2gsICdcXFxcXFxcXFxcXFxcXFxcJyk7XHJcbiAgICAgIG1hdGNoU3RyaW5nID0gbWF0Y2hTdHJpbmcucmVwbGFjZShlc2NhcGVTdHJpbmdSZWdFeHAsICdcXFxcXFxcXCQmJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGB7XHJcbiAgICAgIFwiY29udGVudE5hbWVcIjogXCIke2luY2x1ZGVTY29wZS5tYXRjaCgvXlteI10qLylbMF19XCIsXHJcbiAgICAgIFwiYmVnaW5cIjogXCJcXFxcXFxcXHMqKygke21hdGNoU3RyaW5nfSlcXFxcXFxcXHMqKFxcYClcIixcclxuICAgICAgXCJiZWdpbkNhcHR1cmVzXCI6IHtcclxuICAgICAgICBcIjFcIjogeyBcIm5hbWVcIjogXCJlbnRpdHkubmFtZS50YWcuanNcIiB9LFxyXG4gICAgICAgIFwiMlwiOiB7IFwibmFtZVwiOiBcInB1bmN0dWF0aW9uLmRlZmluaXRpb24ucXVhc2kuYmVnaW4uanNcIiB9XHJcbiAgICAgIH0sXHJcbiAgICAgIFwiZW5kXCI6IFwiXFxcXFxcXFxzKig/PCFcXFxcXFxcXFxcXFxcXFxcKShcXGApXCIsXHJcbiAgICAgIFwiZW5kQ2FwdHVyZXNcIjoge1xyXG4gICAgICAgIFwiMVwiOiB7IFwibmFtZVwiOiBcInB1bmN0dWF0aW9uLmRlZmluaXRpb24ucXVhc2kuZW5kLmpzXCIgfVxyXG4gICAgICB9LFxyXG4gICAgICBcInBhdHRlcm5zXCI6IFtcclxuICAgICAgICB7IFwiaW5jbHVkZVwiOiBcInNvdXJjZS5qcy5qc3gjbGl0ZXJhbC1xdWFzaS1lbWJlZGRlZFwiIH0sXHJcbiAgICAgICAgeyBcImluY2x1ZGVcIjogXCIke2luY2x1ZGVTY29wZX1cIiB9XHJcbiAgICAgIF1cclxuICAgIH1gO1xyXG4gIH1cclxuXHJcbiAgLy8gY2hlY2tzIGEgdHRsIGdyYW1tYXIgZmlsZW5hbWUgZXhpc3RzXHJcbiAgLy8gcmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0cnVlIGlmIHR0bEZpbGVOYW1lIGV4aXN0c1xyXG4gIGRvZXNHcmFtbWFyRmlsZUV4aXN0KHR0bEZpbGVuYW1lKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgZnMuYWNjZXNzKHRoaXMubWFrZVR0bEdyYW1tYXJGaWxlbmFtZUFic291bHV0ZSh0dGxGaWxlbmFtZSksIGZzLkZfT0ssIChlcnIpID0+IHtcclxuICAgICAgICBlcnIgPyByZXNvbHZlKGZhbHNlKTogcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIGdldCBmdWxsIHBhdGggdG8gdGhlIGxhbmd1YWdlLWJhYmVsIGdyYW1tYXIgZmlsZSBkaXJcclxuICBnZXRHcmFtbWFyUGF0aCgpIHtcclxuICAgIHJldHVybiBwYXRoLm5vcm1hbGl6ZShcclxuICAgICAgcGF0aC5yZXNvbHZlKGF0b20ucGFja2FnZXMubG9hZGVkUGFja2FnZXNbJ2xhbmd1YWdlLWJhYmVsJ10ucGF0aCwgJy4vZ3JhbW1hcnMnKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIGdldCBhbiBhcnJheSBvZiBhbGwgbGFuZ3VhZ2UtYmFiZWwgZ3JhbW1hciBmaWxlc1xyXG4gIGdldEdyYW1tYXJGaWxlcygpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpID0+IHtcclxuICAgICAgZnMucmVhZGRpcih0aGlzLmdldEdyYW1tYXJQYXRoKCksKGVyciwgZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmIChlcnIpIHJlamVjdChuZXcgRXJyb3IoZXJyKSk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIHJlYWQgY29uZmlndXJhdGlvbnMgZm9yIHRhZ2dlZCB0ZW1wbGF0ZXNcclxuICBnZXRUdGxDb25maWcoKSB7XHJcbiAgICByZXR1cm4gYXRvbS5jb25maWcuZ2V0KCdsYW5ndWFnZS1iYWJlbCcpLnRhZ2dlZFRlbXBsYXRlR3JhbW1hcjtcclxuICB9XHJcblxyXG4gIC8vIGdldCBhbiBhcnJheSBvZiBncmFtbWFyIHRhZ2dlZCB0ZW1wbGF0ZSBleHRlbnNpb24gZmlsZW5hbWVzXHJcbiAgZ2V0VHRsR3JhbW1hckZpbGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0R3JhbW1hckZpbGVzKCkudGhlbihkaXJGaWxlcyA9PiBkaXJGaWxlcy5maWx0ZXIoZnVuY3Rpb24oZmlsZW5hbWUpIHtcclxuICAgICAgcmV0dXJuIC9edHRsLS8udGVzdChmaWxlbmFtZSk7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICAvLyBnZW5lcmF0ZSBhIFNIQTI1NiBmb3Igc29tZSB0ZXh0XHJcbiAgZ2VuZXJhdGVUdGxTSEEyNTYoc3RyaW5nVG9IYXNoKSB7XHJcbiAgICBsZXQgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKTtcclxuICAgIGhhc2gudXBkYXRlKHN0cmluZ1RvSGFzaCk7XHJcbiAgICByZXR1cm4gaGFzaC5kaWdlc3QoJ2hleCcpO1xyXG4gIH1cclxuXHJcbiAgLy8gdGFnZ2VkIHRlbXBsYXRlIGZpbGVuYW1lXHJcbiAgbWFrZVR0bEdyYW1tYXJGaWxlbmFtZShoYXNoU3RyaW5nKSB7XHJcbiAgICByZXR1cm4gYHR0bC0ke2hhc2hTdHJpbmd9Lmpzb25gO1xyXG4gIH1cclxuXHJcbiAgLy8gZ2V0IGEgZnVsbHkgcXVhbGlmaWVkIGZpbGVuYW1lXHJcbiAgbWFrZVR0bEdyYW1tYXJGaWxlbmFtZUFic291bHV0ZSh0dGxGaWxlbmFtZSkge1xyXG4gICAgcmV0dXJuIHBhdGgucmVzb2x2ZSh0aGlzLmdldEdyYW1tYXJQYXRoKCksIHR0bEZpbGVuYW1lKTtcclxuICB9XHJcblxyXG5cclxuICAvLyBvYnNlcnZlIGNoYW5nZXMgaW4gdGhlIHRhZ2dlZFRlbXBsYXRlR3JhbW1hciBjb25maWcgd2hpY2ggdGFrZSBwbGFjZVxyXG4gIC8vIGJlY2F1c2Ugb2JzZXJ2ZWQgY29uZmlnIGNoYW5nZXMgYXJlIGZpcmVkIGFzIGEgdXNlciB0eXBlcyB0aGVtIGluc2lkZVxyXG4gIC8vIHNldHRpbmdzIHdlIG5lZWQgdG8gZGVsYXkgcHJvY2Vzc2luZyB0aGUgYXJyYXkgc3RyaW5ncywgdW50aWwgbGFzdCBjaGFyXHJcbiAgLy8gZW50ZXJlZCB3YXMgc2V0VGltZW91dCBzZWNvbmRzIGFnby4gcGFyc2UgdGFnZ2VkIHRlbXBsYXRlIGNvbmZpZ3VyYXRpb25cclxuICAvLyBhbmQgdGhlbiBjcmVhdGUgZ3JhbW1hciBhbmQgZ2VuZXJhdGUgYSBTSEEyNTYgaGFzaCBmcm9tIHRoZSBncmFtbWFyXHJcbiAgb2JzZXJ2ZVR0bENvbmZpZyh0aW1lb3V0KSB7XHJcbiAgICBpZiAodGhpcy5jb25maWdDaGFuZ2VkVGltZXIpIGNsZWFyVGltZW91dCh0aGlzLmNvbmZpZ0NoYW5nZWRUaW1lcik7XHJcbiAgICB0aGlzLmNvbmZpZ0NoYW5nZWRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGdyYW1tYXJUZXh0ID0gdGhpcy5jcmVhdGVHcmFtbWFyVGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmdlbmVyYXRlVHRsU0hBMjU2KGdyYW1tYXJUZXh0KTtcclxuICAgICAgICBjb25zdCB0dGxGaWxlbmFtZSA9IHRoaXMubWFrZVR0bEdyYW1tYXJGaWxlbmFtZShoYXNoKTtcclxuICAgICAgICBjb25zdCB0dGxGaWxlbmFtZUFic29sdXRlID0gdGhpcy5tYWtlVHRsR3JhbW1hckZpbGVuYW1lQWJzb3VsdXRlKHR0bEZpbGVuYW1lKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUdyYW1tYXIoe3R0bEZpbGVuYW1lLCB0dGxGaWxlbmFtZUFic29sdXRlLCBncmFtbWFyVGV4dH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGVycikge1xyXG4gICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKCdsYW5ndWFnZS1iYWJlbCcsIHtkZXRhaWw6IGAke2Vyci5tZXNzYWdlfWAsZGlzbWlzc2FibGU6IHRydWV9KTtcclxuICAgICAgfVxyXG4gICAgfSwgdGltZW91dCk7XHJcbiAgfVxyXG5cclxuICAvLyBSZW1vdmUgZ3JhbW1hcnMgYmVmb3JlIHVwb2RhdGluZ1xyXG4gIHJlbW92ZUdyYW1tYXJzKCkge1xyXG4gICAgYXRvbS5ncmFtbWFycy5yZW1vdmVHcmFtbWFyRm9yU2NvcGVOYW1lKHRoaXMuVFRMX1NDT1BFTkFNRSk7XHJcbiAgfVxyXG5cclxuICAvLyByZW1vdmUgYWxsIGxhbmd1YWdlIGZpbGVzIGluIHRhZ2dlZCB0ZW1wbGF0ZSBHcmFtbWFyRmlsZXMgYXJyYXlcclxuICByZW1vdmVUdGxMYW5ndWFnZUZpbGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0VHRsR3JhbW1hckZpbGVzKCkudGhlbigodHRsR3JhbW1hckZpbGVzKSA9PiB7XHJcbiAgICAgIGZvciAobGV0IHR0bEdyYW1tYXJGaWxlbmFtZSBvZiB0dGxHcmFtbWFyRmlsZXMpIHtcclxuICAgICAgICBsZXQgdHRsR3JhbW1hckZpbGVBYnNvdWx0ZSA9IHRoaXMubWFrZVR0bEdyYW1tYXJGaWxlbmFtZUFic291bHV0ZSh0dGxHcmFtbWFyRmlsZW5hbWUpO1xyXG4gICAgICAgIGZzLnVubGluayh0dGxHcmFtbWFyRmlsZUFic291bHRlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxufTtcclxuIl19